{"ast":null,"code":"import { createElement, Component } from 'react';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar initialState = {};\n\nvar FunnelChart = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(FunnelChart, _React$Component);\n\n  function FunnelChart(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = initialState;\n    return _this;\n  }\n\n  var _proto = FunnelChart.prototype;\n\n  _proto.setFunnelRows = function setFunnelRows() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        data = _this$props.data,\n        showNames = _this$props.showNames,\n        showValues = _this$props.showValues,\n        showRunningTotal = _this$props.showRunningTotal,\n        heightRelativeToValue = _this$props.heightRelativeToValue,\n        chartHeight = _this$props.chartHeight,\n        getRowStyle = _this$props.getRowStyle,\n        getRowNameStyle = _this$props.getRowNameStyle,\n        getRowValueStyle = _this$props.getRowValueStyle,\n        decorateValue = _this$props.decorateValue,\n        getToolTip = _this$props.getToolTip,\n        onRowClick = _this$props.onRowClick;\n    var rows = [];\n    var totalValue = this.getTotalValue();\n    var sizePerValue = 0;\n\n    if (heightRelativeToValue && totalValue > 0) {\n      var totalHeight = chartHeight;\n\n      if (!totalHeight) {\n        totalHeight = 500;\n\n        if (window.innerWidth < 500) {\n          totalHeight = 300;\n        }\n      }\n\n      sizePerValue = totalHeight / totalValue;\n    }\n\n    var runningTotal = totalValue;\n\n    if (data) {\n      var _loop = function _loop() {\n        var thisRow = data[i1];\n        var showTitle = true;\n        var showValue = true;\n\n        if (thisRow.value >= 0) {\n          var rowStyle = {};\n          var rowTitleStyle = {};\n          var rowValueStyle = {};\n          var decoratedValue = typeof decorateValue === 'function' ? decorateValue(thisRow, i1, data) : thisRow.value;\n\n          if (typeof getRowStyle === 'function') {\n            rowStyle = getRowStyle(thisRow);\n          }\n\n          if (typeof getRowNameStyle === 'function') {\n            rowTitleStyle = getRowNameStyle(thisRow);\n          }\n\n          if (typeof getRowValueStyle === 'function') {\n            rowValueStyle = getRowValueStyle(thisRow);\n          }\n\n          if (heightRelativeToValue) {\n            var size = sizePerValue * thisRow.value;\n            rowStyle.height = size + 'px';\n            rowStyle.maxHeight = size + 'px';\n\n            if (size < 65) {\n              showValue = false;\n            }\n\n            if (size < 40) {\n              showTitle = false;\n            }\n          }\n\n          if (thisRow.backgroundColor) {\n            rowStyle.backgroundColor = thisRow.backgroundColor;\n          }\n\n          if (!rowStyle.backgroundColor) {\n            rowStyle.backgroundColor = _this2.props.pallette[i1 % _this2.props.pallette.length];\n          }\n\n          if (!showNames) {\n            showTitle = false;\n          }\n\n          if (!showValues) {\n            showValue = false;\n          }\n\n          var toolTip = thisRow.name + '\\n' + runningTotal;\n\n          if (typeof getToolTip === 'function') {\n            toolTip = getToolTip(thisRow);\n          }\n\n          if (typeof onRowClick === 'function') {\n            rowStyle.cursor = 'pointer';\n          }\n\n          rows.push(createElement(\"div\", {\n            key: 'funnel-pipeline-chart-row-' + thisRow.name,\n            className: 'funnel-pipeline-chart-row',\n            style: rowStyle,\n            title: toolTip,\n            onClick: typeof onRowClick === 'function' ? function () {\n              return onRowClick(thisRow);\n            } : undefined\n          }, createElement(\"div\", null, showTitle ? createElement(\"div\", {\n            className: 'funnel-pipeline-chart-title',\n            style: rowTitleStyle\n          }, thisRow.name) : null, showValue ? createElement(\"div\", {\n            className: 'funnel-pipeline-chart-value',\n            style: rowValueStyle\n          }, showRunningTotal ? runningTotal : decoratedValue) : null)));\n        }\n\n        runningTotal = runningTotal - thisRow.value;\n      };\n\n      for (var i1 = 0; i1 < data.length; i1++) {\n        _loop();\n      }\n    }\n\n    return rows;\n  };\n\n  _proto.getTotalValue = function getTotalValue() {\n    var data = this.props.data;\n    var dataTotal = 0;\n\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        dataTotal += data[i1].value;\n      }\n    }\n\n    return dataTotal;\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        title = _this$props2.title,\n        style = _this$props2.style;\n    var chartStyles = {};\n\n    if (style) {\n      Object.assign(chartStyles, style);\n    }\n\n    if (this.props.chartWidth) {\n      chartStyles.maxWidth = this.props.chartWidth;\n    }\n\n    return createElement(\"div\", {\n      className: 'funnel-pipeline-chart',\n      style: chartStyles\n    }, title ? createElement(\"h2\", {\n      style: {\n        marginBottom: '30px'\n      }\n    }, title) : null, this.setFunnelRows());\n  };\n\n  return FunnelChart;\n}(Component);\n\nFunnelChart.defaultProps = {\n  showValues: true,\n  showNames: true,\n  pallette: ['#f14c14', '#f39c35', '#68BC00', '#1d7b63', '#4e97a8', '#4466a3'],\n  showRunningTotal: false,\n  heightRelativeToValue: false\n};\nexport { FunnelChart };","map":{"version":3,"mappings":"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","names":["initialState","FunnelChart","props","_this","state","setFunnelRows","data","showNames","showValues","showRunningTotal","heightRelativeToValue","chartHeight","getRowStyle","getRowNameStyle","getRowValueStyle","decorateValue","getToolTip","onRowClick","rows","totalValue","getTotalValue","sizePerValue","totalHeight","window","innerWidth","runningTotal","thisRow","i1","showTitle","showValue","value","rowStyle","rowTitleStyle","rowValueStyle","decoratedValue","size","height","maxHeight","backgroundColor","_this2","pallette","length","toolTip","name","cursor","push","React","key","className","style","title","onClick","undefined","_loop","dataTotal","render","chartStyles","Object","assign","chartWidth","maxWidth","marginBottom"],"sources":["C:\\Users\\dev\\Desktop\\dashbordreact\\dashboard\\node_modules\\react-funnel-pipeline\\src\\FunnelChart.tsx"],"sourcesContent":["import * as React from 'react'\nimport './index.css'\n\ninterface IFunnelChartProps {\n  data: any\n  title?: string\n  showValues: boolean\n  showNames: boolean\n  pallette: string[]\n  showRunningTotal: boolean\n  heightRelativeToValue: boolean\n  chartHeight?: number\n  chartWidth?: number\n  style?: any\n  getRowStyle?: (row: any) => any\n  getRowNameStyle?: (row: any) => any\n  getRowValueStyle?: (row: any) => any\n  decorateValue?: (row: any, index: number, data: any) => any\n  getToolTip?: (row: any) => string\n  onRowClick?: (row: any) => void\n}\n\ninterface IFunnelChartState {}\n\nconst initialState: IFunnelChartState = {}\n\nclass FunnelChart extends React.Component<\n  IFunnelChartProps,\n  IFunnelChartState\n> {\n  static defaultProps = {\n    showValues: true,\n    showNames: true,\n    pallette: [\n      '#f14c14',\n      '#f39c35',\n      '#68BC00',\n      '#1d7b63',\n      '#4e97a8',\n      '#4466a3'\n    ],\n    showRunningTotal: false,\n    heightRelativeToValue: false\n  }\n\n  constructor(props: IFunnelChartProps) {\n    super(props)\n    this.state = initialState\n  }\n\n  setFunnelRows() {\n    const {\n      data,\n      showNames,\n      showValues,\n      showRunningTotal,\n      heightRelativeToValue,\n      chartHeight,\n      getRowStyle,\n      getRowNameStyle,\n      getRowValueStyle,\n      decorateValue,\n      getToolTip,\n      onRowClick\n    } = this.props\n    const rows = []\n    const totalValue = this.getTotalValue()\n\n    let sizePerValue = 0\n    if (heightRelativeToValue && totalValue > 0) {\n      let totalHeight = chartHeight\n      if (!totalHeight) {\n        totalHeight = 500\n        if (window.innerWidth < 500) {\n          totalHeight = 300\n        }\n      }\n      sizePerValue = totalHeight / totalValue\n    }\n\n    var runningTotal = totalValue\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        const thisRow = data[i1]\n        let showTitle = true\n        let showValue = true\n\n        if (thisRow.value >= 0) {\n          let rowStyle: any = {}\n          let rowTitleStyle: any = {}\n          let rowValueStyle: any = {}\n          const decoratedValue =\n            typeof decorateValue === 'function'\n              ? decorateValue(thisRow, i1, data)\n              : thisRow.value\n\n          if (typeof getRowStyle === 'function') {\n            rowStyle = getRowStyle(thisRow)\n          }\n          if (typeof getRowNameStyle === 'function') {\n            rowTitleStyle = getRowNameStyle(thisRow)\n          }\n          if (typeof getRowValueStyle === 'function') {\n            rowValueStyle = getRowValueStyle(thisRow)\n          }\n\n          if (heightRelativeToValue) {\n            const size = sizePerValue * thisRow.value\n            rowStyle.height = size + 'px'\n            rowStyle.maxHeight = size + 'px'\n            if (size < 65) {\n              showValue = false\n            }\n            if (size < 40) {\n              showTitle = false\n            }\n          }\n          if (thisRow.backgroundColor) {\n            rowStyle.backgroundColor = thisRow.backgroundColor\n          }\n          if (!rowStyle.backgroundColor) {\n            rowStyle.backgroundColor = this.props.pallette[\n              i1 % this.props.pallette.length\n            ]\n          }\n\n          if (!showNames) {\n            showTitle = false\n          }\n          if (!showValues) {\n            showValue = false\n          }\n\n          let toolTip = thisRow.name + '\\n' + runningTotal\n          if (typeof getToolTip === 'function') {\n            toolTip = getToolTip(thisRow)\n          }\n\n          if (typeof onRowClick === 'function') {\n            rowStyle.cursor = 'pointer'\n          }\n\n          rows.push(\n            <div\n              key={'funnel-pipeline-chart-row-' + thisRow.name}\n              className='funnel-pipeline-chart-row'\n              style={rowStyle}\n              title={toolTip}\n              onClick={\n                typeof onRowClick === 'function'\n                  ? () => onRowClick(thisRow)\n                  : undefined\n              }\n            >\n              <div>\n                {showTitle ? (\n                  <div\n                    className='funnel-pipeline-chart-title'\n                    style={rowTitleStyle}\n                  >\n                    {thisRow.name}\n                  </div>\n                ) : null}\n                {showValue ? (\n                  <div\n                    className='funnel-pipeline-chart-value'\n                    style={rowValueStyle}\n                  >\n                    {showRunningTotal ? runningTotal : decoratedValue}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          )\n        }\n\n        runningTotal = runningTotal - thisRow.value\n      }\n    }\n\n    return rows\n  }\n\n  getTotalValue() {\n    const { data } = this.props\n\n    let dataTotal = 0\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        dataTotal += data[i1].value\n      }\n    }\n\n    return dataTotal\n  }\n\n  render() {\n    const { title, style } = this.props\n\n    const chartStyles: any = {}\n    if (style) {\n      Object.assign(chartStyles, style)\n    }\n    if (this.props.chartWidth) {\n      chartStyles.maxWidth = this.props.chartWidth\n    }\n\n    return (\n      <div className='funnel-pipeline-chart' style={chartStyles}>\n        {title ? <h2 style={{ marginBottom: '30px' }}>{title}</h2> : null}\n        {this.setFunnelRows()}\n      </div>\n    )\n  }\n}\n\nexport default FunnelChart\n"]},"metadata":{},"sourceType":"module"}